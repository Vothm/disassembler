00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/15/2021 6:56:49 PM

00000000                             1  *-----------------------------------------------------------------
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Vince Maranan
00000000                             4  * Description: CSS422 Final Project
00000000                             5  *-----------------------------------------------------------------
00000000                             6  
00000000  =0000A000                  7  stack       EQU     $A000               * Stack Address
00000000  =00000004                  8  shift4bits  EQU     4                   * Shift 4 bits
00000000  =00000008                  9  shift8bits  EQU     8                   * Shift 8 bits 
00000000  =0000000C                 10  shift12bits EQU     12                  * Shift 12 bits
00000000  =00000014                 11  printCount  EQU     20                  * Amount of lines to display to console at once
00000000  =0000000D                 12  CR          EQU     $0D                 
00000000  =0000000A                 13  LF          EQU     $0A                 
00000000                            14  
00001000                            15              ORG     $1000
00001000                            16              
00001000  6100 0050                 17  start:      BSR     show                ; Show beginning message
00001004  6100 0074                 18              BSR     CLEARALL             
00001008  4FF9 0000A000             19              LEA     stack,SP                ;Load stack pointer       
0000100E  45F9 000040CA             20              LEA     message_buffer,A2       ;A2 is the message buffer
00001014  2C4A                      21              MOVEA.L A2,A6               
00001016  6100 0086                 22              BSR     HANDLEINPUTS
0000101A  6100 017C                 23              BSR     FILLBUFFER
0000101E  103C 0001                 24              MOVE.B  #1,D0
00001022  43F9 00004088             25              LEA     str_more,A1
00001028  3239 000040B6             26              MOVE.W  strMore_len,D1
0000102E  4E4F                      27              TRAP    #15
00001030  103C 0002                 28              MOVE.B  #2,D0
00001034  4E4F                      29              TRAP    #15
00001036  1611                      30              MOVE.B  (A1),D3     
00001038  12FC 0057                 31              MOVE.B  #'W',(A1)+  
0000103C  12BC 0075                 32              MOVE.B  #'u',(A1)  
00001040  B63C 0031                 33              CMP.B   #$31,D3    
00001044  67BA                      34              BEQ     start
00001046  67B8                      35              BEQ     start
00001048  6100 001C                 36              BSR     program_done
0000104C  4EF9 000040CC             37              JMP     end
00001052                            38          
00001052                            39  ;Utility functions (Printing, clearning, checking addresses)
00001052                            40  
00001052  103C 000D                 41  show        MOVE.B  #13,D0
00001056  43F9 00004000             42              LEA     intro,A1
0000105C  3239 00004034             43              MOVE.W  intro_len,D1
00001062  4E4F                      44              TRAP    #15
00001064  4E75                      45              RTS
00001066                            46  
00001066  103C 0001                 47  program_done  MOVE.B  #1,D0
0000106A  43F9 000040B8             48              LEA     exit,A1
00001070  3239 000040C8             49              MOVE.W  exit_len,D1
00001076  4E4F                      50              TRAP    #15
00001078  4E75                      51              RTS        
0000107A                            52  
0000107A  4240                      53  CLEARALL    CLR     D0
0000107C  4241                      54              CLR     D1
0000107E  4242                      55              CLR     D2
00001080  4243                      56              CLR     D3
00001082  4244                      57              CLR     D4
00001084  4245                      58              CLR     D5
00001086  4246                      59              CLR     D6
00001088  4247                      60              CLR     D7
0000108A  4E75                      61              RTS
0000108C                            62                        
0000108C  4280                      63  CLEARREGISTERS     CLR.L   D0                 
0000108E  4281                      64              CLR.L   D1
00001090  4282                      65              CLR.L   D2
00001092  4283                      66              CLR.L   D3
00001094  4284                      67              CLR.L   D4
00001096  4286                      68              CLR.L   D6
00001098  4287                      69              CLR.L   D7
0000109A  4E75                      70              RTS
0000109C                            71    
0000109C  4E75                      72  EndUtil      RTS
0000109E                            73  
0000109E                            74  HANDLEINPUTS:      ; Handle inputs
0000109E  103C 0001                 75              MOVE.B  #1,D0
000010A2  43F9 00004036             76              LEA     string1,A1
000010A8  3239 0000404E             77              MOVE.W  str_len1,D1         
000010AE  4E4F                      78              TRAP    #15
000010B0  D3FC 0000404E             79              ADDA.L  #str_len1,A1         
000010B6  103C 0002                 80              MOVE.B  #2,D0      
000010BA  4E4F                      81              TRAP    #15
000010BC  4EB9 00001100             82              JSR     asciiToHex           
000010C2  BA3C 0000                 83              CMP.B   #$00,D5
000010C6  6700 0036                 84              BEQ     endInput            
000010CA  2848                      85              MOVEA.L A0,A4         
000010CC  103C 0001                 86              MOVE.B  #1,D0
000010D0  43F9 00004050             87              LEA     string2,A1
000010D6  3239 00004066             88              MOVE.W  str_len2,D1         
000010DC  4E4F                      89              TRAP    #15         
000010DE  D3FC 00004066             90              ADDA.L  #str_len2,A1
000010E4  103C 0002                 91              MOVE.B  #2,D0
000010E8  4E4F                      92              TRAP    #15
000010EA  4EB9 00001100             93              JSR     asciiToHex
000010F0  BA3C 0000                 94              CMP.B   #$00,D5
000010F4  6700 0008                 95              BEQ          endInput           
000010F8  264C                      96              MOVEA.L A4,A3               
000010FA  2848                      97              MOVEA.L A0,A4               
000010FC  204B                      98              MOVEA.L A3,A0        
000010FE                            99                      
000010FE  4E75                     100  endInput    RTS
00001100                           101  
00001100                           102  ; Take D3 (user input) and put the converted ascii to hex on A4
00001100                           103  asciiToHex
00001100  48E7 F800                104              MOVEM.L D0-D4,-(SP)         
00001104  1A3C 0001                105              MOVE.B  #1,D5        
00001108  4EB8 108C                106              JSR     CLEARREGISTERS
0000110C  3C3C 0000                107              MOVE    #0,D6      
00001110                           108        
00001110  1619                     109  cleanup     MOVE.B  (A1)+,D3            
00001112  B63C 0030                110              CMP.B   #$30,D3             
00001116  6D00 0068                111              BLT     finish      
0000111A  B63C 003A                112              CMP.B   #$3A,D3             
0000111E  6D00 0042                113              BLT     num_to_hex      
00001122  B63C 0041                114              CMP.B   #$41,D3             
00001126  6D00 0058                115              BLT     finish      
0000112A  B63C 0047                116              CMP.B   #$47,D3             
0000112E  6D00 003C                117              BLT     cap_to_hex
00001132  B63C 0061                118              CMP.B   #$61,D3             
00001136  6D00 0048                119              BLT     finish      
0000113A  B63C 0067                120              CMP.B   #$67,D3             
0000113E  6D00 0036                121              BLT     lower_to_hex
00001142  B63C 0066                122              CMP.B   #$66,D3             
00001146  6E00 0038                123              BGT     finish      
0000114A                           124        
0000114A  5246                     125  resume      ADD     #1,D6               
0000114C  BC7C 0006                126              CMP     #6,D6               
00001150  6700 002E                127              BEQ     finish      
00001154  0C11 0000                128              CMP.B   #$00,(A1)          
00001158  6700 0026                129              BEQ     finish      
0000115C  E984                     130              ASL.L   #4,D4                         
0000115E  4EF8 1110                131              JMP     cleanup               
00001162                           132  
00001162  0403 0030                133  num_to_hex  SUBI.B  #$30,D3             
00001166  D803                     134              ADD.B   D3,D4               
00001168  4EF8 114A                135              JMP     resume              
0000116C                           136  
0000116C  0403 0037                137  cap_to_hex  SUBI.B  #$37,D3             
00001170  D803                     138              ADD.B   D3,D4               
00001172  4EF8 114A                139              JMP     resume              
00001176                           140  
00001176                           141  lower_to_hex
00001176  0403 0057                142              SUBI.B  #$57,D3             
0000117A  D803                     143              ADD.B   D3,D4               
0000117C  4EF8 114A                144              JMP     resume              
00001180                           145  
00001180  2044                     146  finish      MOVE.L  D4,A0
00001182  4246                     147              CLR     D6                  
00001184  4CDF 001F                148              MOVEM.L (SP)+,D0-D4             
00001188  4E75                     149              RTS                         
0000118A                           150          
0000118A  224A                     151  FILL_ADDRESS: MOVEA.L  A2,A1              
0000118C  4EB9 00001806            152                JSR getLong
00001192  14FC 0009                153                MOVE.B   #$09,(A2)+                                   
00001196  4E75                     154                RTS
00001198                           155           
00001198                           156  ; Print stuff in the buffer
00001198  244E                     157  FILLBUFFER    MOVEA.L A6,A2         
0000119A  61EE                     158              BSR FILL_ADDRESS
0000119C  4EB9 000011DE            159              JSR     opDecode
000011A2  14BC 0000                160              MOVE.B  #00,(A2)            
000011A6  103C 000D                161              MOVE.B  #13,D0
000011AA  4E4F                     162              TRAP    #15                 
000011AC                           163                                
000011AC  B9C8                     164              CMPA.L   A0,A4              
000011AE  6F00 002C                165              BLE      endBuff
000011B2                           166              
000011B2  5247                     167              ADDI    #1,D7              
000011B4  BE7C 0014                168              CMP     #printCount,D7
000011B8  66DE                     169              BNE     FILLBUFFER
000011BA                           170              
000011BA  103C 0001                171              MOVE.B  #1,D0
000011BE  43F9 00004068            172              LEA     str_enter,A1
000011C4  3239 00004086            173              MOVE.W  str_en_len,D1
000011CA  4E4F                     174              TRAP    #15
000011CC                           175              
000011CC  103C 0002                176              MOVE.B  #2,D0
000011D0  4E4F                     177              TRAP    #15
000011D2                           178              
000011D2  12BC 0050                179              MOVE.B  #$50,(A1)
000011D6                           180              
000011D6  4247                     181              CLR     D7                
000011D8  4EF8 1198                182              JMP     FILLBUFFER
000011DC                           183              
000011DC  4E75                     184  endBuff     RTS         
000011DE                           185            
000011DE  48E7 FB0E                186  opDecode    MOVEM.L A4-A6/D0-D4/D6-D7,-(SP)     
000011E2  4EB8 108C                187              JSR     CLEARREGISTERS            
000011E6  1A3C 0001                188              MOVE.B  #1,D5      
000011EA  3E18                     189              MOVE.W  (A0)+,D7           
000011EC  264A                     190              MOVEA.L A2,A3                             
000011EE  4EB9 000011FA            191              JSR     getOpcode              
000011F4                           192  
000011F4  4CDF 70DF                193  opReturn    MOVEM.L (SP)+,D6-D7/D0-D4/A4-A6 
000011F8  4E75                     194              RTS              
000011FA                           195              
000011FA  3C07                     196  getOpcode   MOVE.W  D7,D6              
000011FC  183C 000C                197              MOVE.B  #shift12bits,D4        
00001200  E86E                     198              LSR.W   D4,D6               
00001202  CCFC 0006                199              MULU    #6,D6                          
00001206  4BF9 00001212            200              LEA     jmp_table,A5                                                                                            
0000120C  4EB5 6000                201              JSR     00(A5,D6)         
00001210  4E75                     202              RTS
00001212                           203  
00001212                           204  jmp_table      
00001212  4EF9 0000125A            205              JMP     opcode_0000            
00001218  4EF9 000012B4            206              JMP     opcode_0001            
0000121E                           207              ;JMP     opcode_0010
0000121E  4EF9 0000131A            208              JMP     opcode_0011
00001224  4EF9 000013D4            209              JMP     opcode_0100
0000122A  4EF9 00001438            210              JMP     opcode_0101
00001230  4EF9 00001440            211              JMP     opcode_0110
00001236  4EF9 0000144A            212              JMP     opcode_0111
0000123C                           213              ;JMP     opcode_1000
0000123C  4EF9 00001452            214              JMP     opcode_1001
00001242  4EF9 00001510            215              JMP     opcode_1010
00001248  4EF9 00001518            216              JMP     opcode_1011
0000124E  4EF9 000015CC            217              JMP     opcode_1100
00001254  4EF9 000015FC            218              JMP     opcode_1101
0000125A                           219              ;JMP     opcode_1110
0000125A                           220              ;JMP     opcode_1111
0000125A                           221  
0000125A                           222  ;0000 ORI
0000125A  3C07                     223  opcode_0000   MOVE.W  D7,D6               
0000125C  0246 0F00                224              ANDI.W  #$0F00,D6           
00001260  183C 0008                225              MOVE.B  #shift8bits,D4          
00001264  E8AE                     226              LSR.L   D4,D6               
00001266  BC3C 0000                227              CMP.B   #$0,D6              ; Check if ORI
0000126A  6700 0006                228              BEQ     isORI               ; Jump to opORI section
0000126E  6600 062A                229              BNE     illegalCode                        
00001272                           230  
00001272  14FC 004F                231  isORI       MOVE.B  #'O',(A2)+         
00001276  14FC 0052                232              MOVE.B  #'R',(A2)+
0000127A  14FC 0049                233              MOVE.B  #'I',(A2)+
0000127E  14FC 002E                234              MOVE.B  #'.',(A2)+
00001282  4EB9 0000179A            235              JSR     putSizeBuffer         
00001288  14FC 0020                236              MOVE.B  #' ',(A2)+
0000128C  14FC 0020                237              MOVE.B  #' ',(A2)+
00001290  14FC 0020                238              MOVE.B  #' ',(A2)+
00001294  14FC 0020                239              MOVE.B  #' ',(A2)+            
00001298  14FC 0023                240              MOVE.B  #'#',(A2)+            
0000129C  4EB9 000017EC            241              JSR     getAddr             
000012A2  14FC 002C                242              MOVE.B  #',',(A2)+          
000012A6  4EB9 0000191E            243              JSR     getEA              
000012AC  4EF9 000012B2            244              JMP     end0000           
000012B2                           245  
000012B2  4E75                     246  end0000     RTS
000012B4                           247              
000012B4                           248  ;0001 MOVEA, MOVE
000012B4  14FC 004D                249  opcode_0001   MOVE.B  #'M',(A2)+          
000012B8  14FC 004F                250              MOVE.B  #'O',(A2)+
000012BC  14FC 0056                251              MOVE.B  #'V',(A2)+
000012C0  14FC 0045                252              MOVE.B  #'E',(A2)+
000012C4  1C07                     253              MOVE.B  D7,D6               
000012C6  EC8E                     254              LSR.L   #6,D6              
000012C8  0246 0007                255              ANDI.W  #$07,D6             
000012CC  BC3C 0001                256              CMP.B   #$1,D6            
000012D0  6600 001C                257              BNE     moveL              
000012D4  14FC 0041                258              MOVE.B  #'A',(A2)+
000012D8  14FC 002E                259              MOVE.B  #'.',(A2)+
000012DC  14FC 004C                260              MOVE.B  #'L',(A2)+
000012E0  14FC 0020                261              MOVE.B  #' ',(A2)+
000012E4  14FC 0020                262              MOVE.B  #' ',(A2)+
000012E8  4EF9 00001302            263              JMP     moveLEA            
000012EE  14FC 002E                264  moveL       MOVE.B  #'.',(A2)+
000012F2  14FC 004C                265              MOVE.B  #'L',(A2)+
000012F6  14FC 0020                266              MOVE.B  #' ',(A2)+
000012FA  14FC 0020                267              MOVE.B  #' ',(A2)+
000012FE  14FC 0020                268              MOVE.B  #' ',(A2)+  
00001302  4EB9 0000191E            269  moveLEA     JSR     getEA           
00001308  14FC 002C                270              MOVE.B  #',',(A2)+
0000130C  4EB9 00001380            271              JSR     swapDestReg 
00001312  4EB9 0000191E            272              JSR     getEA     
00001318  4E75                     273  end0010     RTS
0000131A                           274   
0000131A                           275   
0000131A                           276   
0000131A                           277  ; 0011 MOVE
0000131A  14FC 004D                278  opcode_0011   MOVE.B  #'M',(A2)+         
0000131E  14FC 004F                279              MOVE.B  #'O',(A2)+
00001322  14FC 0056                280              MOVE.B  #'V',(A2)+
00001326  14FC 0045                281              MOVE.B  #'E',(A2)+
0000132A  1C07                     282              MOVE.B  D7,D6               
0000132C  EC8E                     283              LSR.L   #6,D6               ; Get bits 6-8
0000132E  0246 0007                284              ANDI.W  #$07,D6             
00001332  BC3C 0001                285              CMP.B   #$1,D6              
00001336  6600 001C                286              BNE     moveW             
0000133A  14FC 0041                287              MOVE.B  #'A',(A2)+         
0000133E  14FC 002E                288              MOVE.B  #'.',(A2)+
00001342  14FC 0057                289              MOVE.B  #'W',(A2)+
00001346  14FC 0020                290              MOVE.B  #' ',(A2)+
0000134A  14FC 0020                291              MOVE.B  #' ',(A2)+
0000134E  4EF9 00001368            292              JMP     moveWEA            
00001354  14FC 002E                293  moveW       MOVE.B  #'.',(A2)+
00001358  14FC 0057                294              MOVE.B  #'W',(A2)+
0000135C  14FC 0020                295              MOVE.B  #' ',(A2)+
00001360  14FC 0020                296              MOVE.B  #' ',(A2)+
00001364  14FC 0020                297              MOVE.B  #' ',(A2)+  
00001368  4EB9 0000191E            298  moveWEA     JSR     getEA            
0000136E  14FC 002C                299              MOVE.B  #',',(A2)+
00001372  4EB9 00001380            300              JSR     swapDestReg 
00001378  4EB9 0000191E            301              JSR     getEA     
0000137E  4E75                     302  end0011     RTS 
00001380                           303  
00001380  4283                     304  swapDestReg CLR.L   D3                  
00001382  3C07                     305              MOVE.W  D7,D6              
00001384  E04E                     306              LSR.W   #shift8bits,D6        
00001386  E24E                     307              LSR.W   #1,D6               
00001388  0246 0007                308              ANDI.W  #$0007,D6          
0000138C  8646                     309              OR.W    D6,D3              
0000138E  3C07                     310              MOVE.W  D7,D6               
00001390  E64E                     311              LSR.W   #3,D6              
00001392  0246 0038                312              ANDI.W  #$0038,D6          
00001396  8646                     313              OR.W    D6,D3               
00001398  4EB9 000013A2            314              JSR     moveSize            
0000139E  3E03                     315              MOVE.W  D3,D7             
000013A0  4E75                     316              RTS
000013A2                           317              
000013A2  3C07                     318  moveSize    MOVE.W  D7,D6             
000013A4  E04E                     319              LSR.W   #shift8bits,D6       
000013A6  E84E                     320              LSR.W   #shift4bits,D6          
000013A8  0246 0003                321              ANDI.W  #$0003,D6           
000013AC  BC3C 0001                322              CMP.B   #$1,D6              
000013B0  6700 0020                323              BEQ     mSizeEnd            
000013B4  BC3C 0002                324              CMP.B   #$2,D6             
000013B8  6700 0014                325              BEQ     moveSizeL          
000013BC  BC3C 0003                326              CMP.B   #$3,D6             
000013C0  6600 04D8                327              BNE     illegalCode               
000013C4  0043 0040                328  moveSizeW   ORI.W   #$0040,D3          
000013C8  4EF9 000013D2            329              JMP     mSizeEnd            
000013CE  0043 0080                330  moveSizeL   ORI.W   #$0080,D3          
000013D2  4E75                     331  mSizeEnd    RTS 
000013D4                           332  
000013D4                           333  ; 0100 NOP, MOVEM, LEA
000013D4  3C07                     334  opcode_0100   MOVE.W  D7,D6               
000013D6  0246 0100                335              ANDI.W  #$0100,D6           
000013DA  BC7C 0100                336              CMP.W   #$0100,D6           
000013DE  6700 0022                337              BEQ     opLEA               
000013E2  3C07                     338              MOVE.W  D7,D6              
000013E4  183C 0008                339              MOVE.B  #shift8bits,D4       
000013E8  E86E                     340              LSR.W   D4,D6              
000013EA  0246 000F                341              ANDI.W  #$000F,D6           
000013EE  CCFC 0006                342              MULU    #6,D6              
000013F2  4BF9 000016BA            343              LEA     jump_table1,A5         
000013F8  4EB5 6000                344              JSR     00(A5,D6)           
000013FC  4EF9 00001436            345              JMP     end0100            
00001402                           346              
00001402  14FC 004C                347  opLEA       MOVE.B  #'L',(A2)+         
00001406  14FC 0045                348              MOVE.B  #'E',(A2)+
0000140A  14FC 0041                349              MOVE.B  #'A',(A2)+
0000140E  14FC 0020                350              MOVE.B  #' ',(A2)+
00001412  14FC 0009                351              MOVE.B  #$09,(A2)+ 
00001416  4EB9 0000191E            352              JSR     getEA             
0000141C  14FC 002C                353              MOVE.B  #',',(A2)+       
00001420  14FC 0041                354              MOVE.B  #'A',(A2)+        
00001424  3C07                     355              MOVE.W  D7,D6              
00001426  183C 0009                356              MOVE.B  #9,D4              
0000142A  E86E                     357              LSR.W   D4,D6             
0000142C  0246 000F                358              ANDI.W  #$000F,D6         
00001430  0606 0030                359              ADD.B   #$30,D6            
00001434  14C6                     360              MOVE.B  D6,(A2)+            
00001436  4E75                     361  end0100     RTS
00001438                           362  
00001438  4EB9 0000189A            363  opcode_0101   JSR     illegalCode         
0000143E  4E75                     364              RTS
00001440                           365              
00001440                           366              ***** MOVEM Command
00001440  4EB9 0000189A            367  opcode_0110   JSR     illegalCode
00001446  5448                     368              ADDQ.W  #2,A0
00001448  4E75                     369              RTS
0000144A                           370  
0000144A  4EB9 0000189A            371  opcode_0111   JSR     illegalCode       
00001450  4E75                     372              RTS
00001452                           373             
00001452                           374  ; 1001 sub
00001452  14FC 0053                375  opcode_1001   MOVE.B  #'S',(A2)+         
00001456  14FC 0055                376              MOVE.B  #'U',(A2)+
0000145A  14FC 0042                377              MOVE.B  #'B',(A2)+
0000145E  4EB9 00001790            378              JSR     getSize            
00001464  BC3C 0003                379              CMP.B   #%11,D6           
00001468  6600 004E                380              BNE     opSUB              
0000146C  14FC 0041                381              MOVE.B  #'A',(A2)+        
00001470  14FC 002E                382              MOVE.B  #'.',(A2)+
00001474  3C07                     383              MOVE.W  D7,D6              
00001476  E08E                     384              LSR.L   #shift8bits,D6         
00001478  0246 0001                385              ANDI.W  #$0001,D6         
0000147C  BC3C 0001                386              CMP.B   #%1,D6            
00001480  6700 000C                387              BEQ     subaL               
00001484  14FC 0057                388              MOVE.B  #'W',(A2)+        
00001488  4EF9 00001492            389              JMP     opSUBA
0000148E  14FC 004C                390  subaL       MOVE.B  #'L',(A2)+                 
00001492  14FC 0020                391  opSUBA      MOVE.B  #' ',(A2)+
00001496  14FC 0020                392              MOVE.B  #' ',(A2)+
0000149A  14FC 0020                393              MOVE.B  #' ',(A2)+
0000149E                           394  
0000149E  4EB9 0000191E            395              JSR     getEA             
000014A4  14FC 002C                396              MOVE.B  #',',(A2)+
000014A8  14FC 0041                397              MOVE.B  #'A',(A2)+  
000014AC  4EB9 000017D0            398              JSR     highRegBits        
000014B2  4EF9 000016B8            399              JMP     end1101
000014B8                           400              
000014B8  14FC 002E                401  opSUB       MOVE.B  #'.',(A2)+        
000014BC  4EB9 0000179A            402              JSR     putSizeBuffer         
000014C2  14FC 0020                403              MOVE.B  #' ',(A2)+
000014C6  14FC 0020                404              MOVE.B  #' ',(A2)+
000014CA  14FC 0020                405              MOVE.B  #' ',(A2)+
000014CE  14FC 0020                406              MOVE.B  #' ',(A2)+
000014D2  4EB9 000017E2            407              JSR     getDirBit           
000014D8  BC3C 0000                408              CMP.B   #%0,D6            
000014DC  6600 001C                409              BNE     opSUB01            
000014E0  4EB9 0000191E            410              JSR     getEA            
000014E6  14FC 002C                411              MOVE.B  #',',(A2)+        
000014EA  14FC 0044                412              MOVE.B  #'D',(A2)+         
000014EE  4EB9 000017D0            413              JSR     highRegBits       
000014F4  4EF9 0000150E            414              JMP     end1001            
000014FA                           415              
000014FA  14FC 0044                416  opSUB01     MOVE.B  #'D',(A2)+         
000014FE  4EB9 000017D0            417              JSR     highRegBits      
00001504  14FC 002C                418              MOVE.B  #',',(A2)+        
00001508  4EB9 0000191E            419              JSR     getEA                    
0000150E                           420              
0000150E  4E75                     421  end1001     RTS            
00001510                           422  
00001510  4EB9 0000189A            423  opcode_1010   JSR     illegalCode          
00001516  4E75                     424              RTS
00001518                           425  ;1011 CMP
00001518  4EB9 00001790            426  opcode_1011   JSR     getSize            
0000151E  BC3C 0003                427              CMP.B   #%11,D6           
00001522  6600 005A                428              BNE     opCMPEOR
00001526  14FC 0043                429              MOVE.B  #'C',(A2)+          
0000152A  14FC 004D                430              MOVE.B  #'M',(A2)+
0000152E  14FC 0050                431              MOVE.B  #'P',(A2)+
00001532  14FC 0041                432              MOVE.B  #'A',(A2)+
00001536  14FC 002E                433              MOVE.B  #'.',(A2)+
0000153A  3C07                     434              MOVE.W  D7,D6               
0000153C  E08E                     435              LSR.L   #shift8bits,D6        
0000153E  0246 0001                436              ANDI.W  #$0001,D6           
00001542  BC3C 0001                437              CMP.B   #%1,D6              
00001546  6700 000C                438              BEQ     cmpaL              
0000154A  14FC 0057                439              MOVE.B  #'W',(A2)+          
0000154E  4EF9 00001558            440              JMP     opCMPA              
00001554  14FC 004C                441  cmpaL       MOVE.B  #'L',(A2)+                 
00001558  14FC 0020                442  opCMPA      MOVE.B  #' ',(A2)+
0000155C  14FC 0020                443              MOVE.B  #' ',(A2)+
00001560  14FC 0020                444              MOVE.B  #' ',(A2)+
00001564  4EB9 0000191E            445              JSR     getEA               
0000156A  14FC 002C                446              MOVE.B  #',',(A2)+
0000156E  14FC 0041                447              MOVE.B  #'A',(A2)+
00001572  4EB9 000017D0            448              JSR     highRegBits         
00001578  4EF9 000015CA            449              JMP     end1011             
0000157E                           450              
0000157E  3C07                     451  opCMPEOR    MOVE.W  D7,D6              
00001580  4EB9 000017E2            452              JSR     getDirBit           
00001586  BC3C 0000                453              CMP.B   #%0,D6             
0000158A  14FC 0043                454              MOVE.B  #'C',(A2)+          
0000158E  14FC 004D                455              MOVE.B  #'M',(A2)+
00001592  14FC 0050                456              MOVE.B  #'P',(A2)+
00001596  14FC 002E                457              MOVE.B  #'.',(A2)+
0000159A  4EB9 0000179A            458              JSR     putSizeBuffer         
000015A0  14FC 0020                459              MOVE.B  #' ',(A2)+
000015A4  14FC 0020                460              MOVE.B  #' ',(A2)+
000015A8  14FC 0020                461              MOVE.B  #' ',(A2)+
000015AC  14FC 0020                462              MOVE.B  #' ',(A2)+
000015B0  4EB9 0000191E            463              JSR     getEA               
000015B6  14FC 002C                464              MOVE.B  #',',(A2)+
000015BA  14FC 0044                465              MOVE.B  #'D',(A2)+  
000015BE  4EB9 000017D0            466              JSR     highRegBits        
000015C4  4EF9 000015CA            467              JMP     end1011             
000015CA                           468        
000015CA  4E75                     469  end1011     RTS
000015CC                           470  
000015CC  3C07                     471  opcode_1100   MOVE.W  D7,D6              
000015CE  EC8E                     472  opMULU      LSR.L   #6,D6             
000015D0  0246 0003                473              ANDI.W  #$3,D6             
000015D4  BC3C 0003                474              CMP.B   #$3,D6             
000015D8  6700 0002                475              BEQ     isMULU           
000015DC  3C07                     476  isMULU      MOVE.W  D7,D6           
000015DE  E68E                     477              LSR.L   #3,D6              
000015E0  0246 0007                478              ANDI.W  #$7,D6             
000015E4  BC3C 0007                479              CMP.B   #$7,D6             
000015E8  6700 0008                480              BEQ     movePTR           
000015EC  4EF9 0000189A            481              JMP     illegalCode     
000015F2                           482  
000015F2  5448                     483  movePTR     ADDQ.W  #2,A0           
000015F4  4EF9 0000189A            484              JMP     illegalCode
000015FA                           485          
000015FA                           486  
000015FA  4E75                     487  end1100     RTS
000015FC                           488  
000015FC  14FC 0041                489  opcode_1101   MOVE.B  #'A',(A2)+        
00001600  14FC 0044                490              MOVE.B  #'D',(A2)+
00001604  14FC 0044                491              MOVE.B  #'D',(A2)+
00001608  4EB9 00001790            492              JSR     getSize            
0000160E  BC3C 0003                493              CMP.B   #%11,D6            
00001612  6600 004E                494              BNE     opADD             
00001616  14FC 0041                495              MOVE.B  #'A',(A2)+          
0000161A  14FC 002E                496              MOVE.B  #'.',(A2)+
0000161E  3C07                     497              MOVE.W  D7,D6               
00001620  E08E                     498              LSR.L   #shift8bits,D6       
00001622  0246 0001                499              ANDI.W  #$0001,D6          
00001626  BC3C 0001                500              CMP.B   #%1,D6              
0000162A  6700 000C                501              BEQ     addaL              
0000162E  14FC 0057                502              MOVE.B  #'W',(A2)+          
00001632  4EF9 0000163C            503              JMP     opADDA
00001638  14FC 004C                504  addaL       MOVE.B  #'L',(A2)+                
0000163C  14FC 0020                505  opADDA      MOVE.B  #' ',(A2)+
00001640  14FC 0020                506              MOVE.B  #' ',(A2)+
00001644  14FC 0020                507              MOVE.B  #' ',(A2)+
00001648                           508  
00001648  4EB9 0000191E            509              JSR     getEA              
0000164E  14FC 002C                510              MOVE.B  #',',(A2)+
00001652  14FC 0041                511              MOVE.B  #'A',(A2)+  
00001656  4EB9 000017D0            512              JSR     highRegBits       
0000165C  4EF9 000016B8            513              JMP     end1101
00001662                           514              
00001662  14FC 002E                515  opADD       MOVE.B  #'.',(A2)+        
00001666  4EB9 0000179A            516              JSR     putSizeBuffer       
0000166C  14FC 0020                517              MOVE.B  #' ',(A2)+
00001670  14FC 0020                518              MOVE.B  #' ',(A2)+
00001674  14FC 0020                519              MOVE.B  #' ',(A2)+
00001678  14FC 0020                520              MOVE.B  #' ',(A2)+
0000167C  4EB9 000017E2            521              JSR     getDirBit           
00001682  BC3C 0000                522              CMP.B   #%0,D6             
00001686  6600 001C                523              BNE     opADD01             
0000168A  4EB9 0000191E            524              JSR     getEA               
00001690  14FC 002C                525              MOVE.B  #',',(A2)+         
00001694  14FC 0044                526              MOVE.B  #'D',(A2)+          
00001698  4EB9 000017D0            527              JSR     highRegBits        
0000169E  4EF9 000016B8            528              JMP     end1101             
000016A4                           529              
000016A4  14FC 0044                530  opADD01     MOVE.B  #'D',(A2)+          
000016A8  4EB9 000017D0            531              JSR     highRegBits        
000016AE  14FC 002C                532              MOVE.B  #',',(A2)+         
000016B2  4EB9 0000191E            533              JSR     getEA               
000016B8                           534  
000016B8  4E75                     535  end1101     RTS
000016BA                           536  
000016BA                           537  
000016BA                           538  jump_table1    
000016BA  4EF9 00001702            539              JMP     opcode1_0000            
000016C0  4EF9 0000170A            540              JMP     opcode1_0001            
000016C6                           541              ;JMP     opcode1_0010
000016C6                           542              ;JMP     opcode1_0011
000016C6                           543              ;JMP     opcode1_0100
000016C6  4EF9 0000171A            544              JMP     opcode1_0101
000016CC                           545              ;JMP     opcode1_0110
000016CC  4EF9 00001722            546              JMP     opcode1_0111
000016D2  4EF9 0000172A            547              JMP     opcode1_1000
000016D8  4EF9 00001744            548              JMP     opcode1_1001
000016DE  4EF9 0000174C            549              JMP     opcode1_1010
000016E4  4EF9 00001754            550              JMP     opcode1_1011
000016EA  4EF9 0000175C            551              JMP     opcode1_1100
000016F0  4EF9 00001764            552              JMP     opcode1_1101
000016F6  4EF9 00001774            553              JMP     opcode1_1110
000016FC  4EF9 0000176C            554              JMP     opcode1_1111
00001702                           555              
00001702  4EB9 0000189A            556  opcode1_0000   JSR     illegalCode
00001708  4E75                     557              RTS
0000170A                           558              
0000170A  4EB9 0000189A            559  opcode1_0001   JSR     illegalCode
00001710  4E75                     560              RTS
00001712                           561              
00001712  4EB9 0000189A            562  opcode1_0011   JSR     illegalCode
00001718  4E75                     563              RTS
0000171A                           564                            
0000171A                           565              
0000171A  4EB9 0000189A            566  opcode1_0101   JSR     illegalCode
00001720  4E75                     567              RTS
00001722                           568          
00001722                           569              
00001722  4EB9 0000189A            570  opcode1_0111   JSR     illegalCode
00001728  4E75                     571              RTS
0000172A                           572              
0000172A                           573              
0000172A                           574  ;0100 MOVEM
0000172A  3C07                     575  opcode1_1000   MOVE.W  D7,D6          
0000172C  E88E                     576              LSR.L   #shift4bits,D6     
0000172E  0246 000F                577              ANDI.W  #$000F,D6      
00001732  BC3C 0004                578              CMP.B   #$4,D6         
00001736  6600 0004                579              BNE     opMOVEM  
0000173A  4E75                     580              RTS            
0000173C                           581  
0000173C  4EB9 0000189A            582  opMOVEM     JSR     illegalCode
00001742  4E75                     583              RTS   
00001744                           584  
00001744  4EB9 0000189A            585  opcode1_1001   JSR     illegalCode
0000174A  4E75                     586              RTS   
0000174C  4EB9 0000189A            587  opcode1_1010   JSR     illegalCode
00001752  4E75                     588              RTS   
00001754  4EB9 0000189A            589  opcode1_1011   JSR     illegalCode
0000175A  4E75                     590              RTS
0000175C  4EB9 0000189A            591  opcode1_1100   JSR     illegalCode
00001762  4E75                     592              RTS
00001764  4EB9 0000189A            593  opcode1_1101   JSR     illegalCode
0000176A  4E75                     594              RTS
0000176C  4EB9 0000189A            595  opcode1_1111   JSR     illegalCode
00001772  4E75                     596              RTS   
00001774                           597  
00001774                           598  
00001774                           599  ;0100 NOP
00001774  4EB9 00001790            600  opcode1_1110   JSR     getSize            
0000177A  BC3C 0002                601              CMP.B   #%10,D6           
0000177E  6600 011A                602              BNE     illegalCode         
00001782                           603               
00001782  14FC 004E                604              MOVE.B  #'N',(A2)+        
00001786  14FC 004F                605              MOVE.B  #'O',(A2)+
0000178A  14FC 0050                606              MOVE.B  #'P',(A2)+
0000178E  4E75                     607              RTS
00001790                           608  
00001790  3C07                     609  getSize     MOVE.W  D7,D6            
00001792  EC4E                     610              LSR.W   #6,D6              
00001794  0246 0003                611              ANDI.W  #$0003,D6         
00001798  4E75                     612              RTS
0000179A                           613  
0000179A  4EB8 1790                614  putSizeBuffer JSR     getSize            
0000179E  BC3C 0000                615              CMP.B   #%00,D6             
000017A2  6700 001C                616              BEQ     addBToBuffer              
000017A6  BC3C 0001                617              CMP.B   #%01,D6            
000017AA  6700 001E                618              BEQ     addWToBuffer             
000017AE  BC3C 0002                619              CMP.B   #%10,D6             
000017B2  6600 00E6                620              BNE     illegalCode           
000017B6                           621        
000017B6  14FC 004C                622              MOVE.B  #'L',(A2)+          
000017BA  4EF9 000017CE            623              JMP     mainEnd             
000017C0                           624              
000017C0  14FC 0042                625  addBToBuffer       MOVE.B  #'B',(A2)+        
000017C4  4EF9 000017CE            626                      JMP     mainEnd             
000017CA                           627              
000017CA  14FC 0057                628  addWToBuffer       MOVE.B  #'W',(A2)+      
000017CE  4E75                     629  mainEnd     RTS                                            
000017D0                           630  
000017D0  3C07                     631  highRegBits MOVE.W  D7,D6               
000017D2  E08E                     632              LSR.L   #shift8bits,D6        
000017D4  E28E                     633              LSR.L   #1,D6              
000017D6  0206 0007                634              ANDI.B  #$7,D6            
000017DA  0606 0030                635              ADD.B   #$30,D6           
000017DE  14C6                     636              MOVE.B  D6,(A2)+          
000017E0  4E75                     637              RTS
000017E2                           638  
000017E2  3C07                     639  getDirBit   MOVE.W  D7,D6              
000017E4  E08E                     640              LSR.L   #shift8bits,D6        
000017E6  0206 0001                641              ANDI.B  #01,D6              
000017EA  4E75                     642              RTS  
000017EC                           643              
000017EC  BC3C 0000                644  getAddr     CMP.B   #%00,D6            
000017F0  6700 0244                645              BEQ     putbytebuffer        
000017F4  BC3C 0001                646              CMP.B   #%01,D6            
000017F8  6700 024A                647              BEQ     putWordBuffer        
000017FC  BC3C 0002                648              CMP.B   #%10,D6            
00001800  6700 025A                649              BEQ     putLongBuffer         
00001804  4E75                     650              RTS
00001806                           651  
00001806  4EB9 00001864            652  getLong     JSR     cmdSh1            
0000180C  183C 000C                653              MOVE.B  #shift12bits,D4      
00001810  4EB9 0000186C            654              JSR     cmdSh2            
00001816  183C 0008                655              MOVE.B  #shift8bits,D4       
0000181A  4EB9 0000186C            656              JSR     cmdSh2             
00001820  183C 0004                657              MOVE.B  #shift4bits,D4         
00001824  4EB9 0000186C            658              JSR     cmdSh2             
0000182A  183C 0000                659              MOVE.B  #0,D4
0000182E  4EB9 00001886            660              JSR     cmdSh4             
00001834  183C 000C                661              MOVE.B  #shift12bits,D4        
00001838  4EB9 00001886            662              JSR     cmdSh4              
0000183E  183C 0008                663              MOVE.B  #shift8bits,D4         
00001842  4EB9 00001886            664              JSR     cmdSh4           
00001848  183C 0004                665              MOVE.B  #shift4bits,D4        
0000184C  4EB9 00001886            666              JSR     cmdSh4             
00001852  183C 0000                667              MOVE.B  #0,D4              
00001856  E8AE                     668              LSR.L   D4,D6               
00001858  0286 0000000F            669              ANDI.L  #$0000000F,D6      
0000185E  4EB9 00001906            670              JSR     converToHex           
00001864                           671  
00001864  7C00                     672  cmdSh1      MOVEQ   #$0,D6             
00001866  2C08                     673              MOVE.L  A0,D6              
00001868  4846                     674              SWAP    D6                 
0000186A  4E75                     675              RTS
0000186C                           676  
0000186C  E8AE                     677  cmdSh2      LSR.L   D4,D6               
0000186E  0286 0000000F            678              ANDI.L  #$0000000F,D6      
00001874  4EB9 00001906            679              JSR     converToHex          
0000187A  4EB8 1864                680              JSR     cmdSh1             
0000187E  4E75                     681              RTS
00001880                           682  
00001880  7C00                     683  cmdSh3      MOVEQ   #$0,D6              
00001882  2C08                     684              MOVE.L  A0,D6               
00001884  4E75                     685              RTS
00001886                           686              
00001886  E8AE                     687  cmdSh4      LSR.L   D4,D6              
00001888  0286 0000000F            688              ANDI.L  #$0000000F,D6       
0000188E  4EB9 00001906            689              JSR     converToHex         
00001894  4EB8 1880                690              JSR     cmdSh3             
00001898  4E75                     691              RTS
0000189A                           692              
0000189A  1A3C 0000                693  illegalCode     MOVE.B  #0,D5         
0000189E  244B                     694              MOVEA.L A3,A2               
000018A0  14FC 0044                695              MOVE.B  #'D',(A2)+          
000018A4  14FC 0041                696              MOVE.B  #'A',(A2)+
000018A8  14FC 0054                697              MOVE.B  #'T',(A2)+
000018AC  14FC 0041                698              MOVE.B  #'A',(A2)+
000018B0  14FC 0009                699              MOVE.B  #$09,(A2)+
000018B4  14FC 0024                700              MOVE.B  #'$',(A2)+          
000018B8  4EB9 000018C0            701              JSR     loadDataBuffer          
000018BE  4E75                     702              RTS          
000018C0                           703  
000018C0  7C00                     704  loadDataBuffer      MOVEQ   #$0,D6              
000018C2  3C07                     705                      MOVE.W  D7,D6               
000018C4  183C 000C                706                      MOVE.B  #shift12bits,D4         
000018C8  E8AE                     707                      LSR.L   D4,D6               
000018CA  0246 000F                708                      ANDI.W  #$000F,D6           
000018CE  4EB9 00001906            709                      JSR     converToHex           
000018D4  3C07                     710                      MOVE.W  D7,D6
000018D6  183C 0008                711                      MOVE.B  #shift8bits,D4
000018DA  E8AE                     712                      LSR.L   D4,D6
000018DC  0246 000F                713                      ANDI.W  #$000F,D6
000018E0  4EB9 00001906            714                      JSR     converToHex           
000018E6  3C07                     715                      MOVE.W  D7,D6
000018E8  183C 0004                716                      MOVE.B  #shift4bits,D4
000018EC  E8AE                     717                      LSR.L   D4,D6
000018EE  0246 000F                718                      ANDI.W  #$000F,D6
000018F2  4EB9 00001906            719                      JSR     converToHex           
000018F8  3C07                     720                      MOVE.W  D7,D6
000018FA  0246 000F                721                      ANDI.W  #$000F,D6
000018FE  4EB9 00001906            722                      JSR     converToHex           
00001904  4E75                     723                      RTS
00001906                           724             
00001906                           725  
00001906                           726  ; Convert hex to ascii
00001906  BC3C 000A                727  converToHex   CMP.B   #$A,D6             
0000190A  6C00 000A                728              BGE     letter              
0000190E  0606 0030                729              ADDI.B  #$30,D6             
00001912  6000 0006                730              BRA hexToBuffer
00001916                           731              
00001916  0606 0037                732  letter      ADDI.B  #$37,D6
0000191A  14C6                     733  hexToBuffer MOVE.B D6, (A2)+
0000191C  4E75                     734              RTS
0000191E                           735              
0000191E                           736  getEA       
0000191E  4BF9 00001948            737              LEA         ea_mode_table,A5 
00001924  4282                     738              CLR.L   D2
00001926  4283                     739              CLR.L   D3
00001928  4284                     740              CLR.L   D4           
0000192A  4286                     741              CLR.L   D6
0000192C  3C07                     742              MOVE.W  D7,D6                 
0000192E  0246 003F                743              ANDI.W  #$003F,D6            
00001932  123C 0003                744              MOVE.B      #3,D1                       
00001936  E26E                     745              LSR.W       D1,D6                       
00001938                           746  
00001938  CCFC 0006                747              MULU      #6,D6                     
0000193C  4EB5 6000                748              JSR         00(A5,D6)               
00001940                           749  
00001940  4E75                     750              RTS                                
00001942  4EF9 000040CC            751              JMP         END                    
00001948                           752  
00001948                           753  ea_mode_table                             
00001948  4EF9 00001978            754              JMP     EAcode000             ; Data Register Direct (mode 0)
0000194E  4EF9 0000198A            755              JMP     EAcode001             ; Address Register Direct (mode 1)
00001954  4EF9 0000199C            756              JMP     EAcode010             ; Address Register Diret (mode 2)
0000195A  4EF9 000019B6            757              JMP     EAcode011             ; Address Register Indirect with Post Increment (mode 3)
00001960  4EF9 000019D4            758              JMP     EAcode100             ; Address Register Indirect with Pre Decrement (mode 4)
00001966  4EF9 000019F2            759              JMP     EAcode101             ; Absolute Word Address (mode 7 subclass 0)
0000196C  4EF9 000019F6            760              JMP     EAcode110             ; Absolute Long Address (mode 7 subclass 1)
00001972  4EF9 000019FA            761              JMP     EAcode111             ; Immediate Data (mode 7 subclass 4)
00001978                           762  
00001978                           763  EAcode000
00001978  3C07                     764              MOVE.W      D7,D6                 
0000197A  0246 0007                765              ANDI.W      #$7,D6                 
0000197E  14FC 0044                766              MOVE.B      #'D',(A2)+              
00001982  0606 0030                767              ADD.B       #$30,D6                 
00001986  14C6                     768              MOVE.B      D6,(A2)+                            
00001988  4E75                     769              RTS
0000198A                           770   
0000198A                           771  EAcode001
0000198A  3C07                     772              MOVE.W      D7,D6                   
0000198C  0246 0007                773              ANDI.W      #$7,D6                  
00001990  14FC 0041                774              MOVE.B      #'A',(A2)+              
00001994  0606 0030                775              ADD.B       #$30,D6                
00001998  14C6                     776              MOVE.B      D6,(A2)+                
0000199A  4E75                     777              RTS
0000199C                           778  
0000199C                           779  EAcode010
0000199C  3C07                     780              MOVE.W      D7,D6                   
0000199E  0246 0007                781              ANDI.W      #$7,D6                  
000019A2  14FC 0028                782              MOVE.B      #'(',(A2)+                       
000019A6  14FC 0041                783              MOVE.B      #'A',(A2)+              
000019AA  0606 0030                784              ADD.B       #$30,D6                 
000019AE  14C6                     785              MOVE.B      D6,(A2)+                
000019B0  14FC 0029                786              MOVE.B      #')',(A2)+              
000019B4  4E75                     787              RTS
000019B6                           788   
000019B6                           789  EAcode011
000019B6                           790              
000019B6  3C07                     791              MOVE.W      D7,D6                   
000019B8  0246 0007                792              ANDI.W      #$7,D6                  
000019BC  14FC 0028                793              MOVE.B      #'(',(A2)+                      
000019C0  14FC 0041                794              MOVE.B      #'A',(A2)+             
000019C4  0606 0030                795              ADD.B       #$30,D6                 
000019C8  14C6                     796              MOVE.B      D6,(A2)+                
000019CA  14FC 0029                797              MOVE.B      #')',(A2)+              
000019CE  14FC 002B                798              MOVE.B      #'+',(A2)+              
000019D2  4E75                     799              RTS
000019D4                           800  
000019D4  3C07                     801  EAcode100   MOVE.W      D7,D6                   
000019D6  0246 0007                802              ANDI.W      #$7,D6                  
000019DA  14FC 002D                803              MOVE.B      #'-',(A2)+              
000019DE  14FC 0028                804              MOVE.B      #'(',(A2)+                          
000019E2  14FC 0041                805              MOVE.B      #'A',(A2)+              
000019E6  0606 0030                806              ADD.B       #$30,D6                 
000019EA  14C6                     807              MOVE.B      D6,(A2)+                
000019EC  14FC 0029                808              MOVE.B      #')',(A2)+              
000019F0  4E75                     809              RTS                                     
000019F2                           810              
000019F2                           811  EAcode101
000019F2  4EF8 189A                812               JMP    illegalCode          * set bad instruction flag
000019F6                           813  EAcode110
000019F6  4EF8 189A                814              JMP       illegalCode             * set bad instruction flag
000019FA                           815  
000019FA  3C07                     816  EAcode111   MOVE.W D7, D6
000019FC  0246 0007                817              ANDI.W #$07, D6
00001A00  0C06 0000                818              CMPI.B   #$0,D6              
00001A04  6700 003E                819              BEQ      putWordBuffer         
00001A08  0C06 0001                820              CMPI.B   #$1,D6              
00001A0C  6700 004E                821              BEQ      putLongBuffer         
00001A10  0C06 0002                822              CMPI.B   #$2,D6
00001A14  0C06 0002                823              CMPI.B   #$2,D6              
00001A18  6700 0004                824              BEQ      pctobuffer  
00001A1C  4E75                     825              RTS
00001A1E                           826  
00001A1E                           827   
00001A1E                           828  ; Add '(pc)' to buffer
00001A1E                           829  pctobuffer
00001A1E  4EB9 00001A44            830              JSR         putWordBuffer
00001A24  14FC 0028                831              MOVE.B      #'(',(A2)+                        
00001A28  14FC 0050                832              MOVE.B      #'P',(A2)+              
00001A2C  14FC 0043                833              MOVE.B      #'C',(A2)+              
00001A30  14FC 0029                834              MOVE.B      #')',(A2)+                                     
00001A34  4E75                     835              RTS
00001A36                           836  
00001A36                           837  putbytebuffer   
00001A36  14FC 0024                838              MOVE.B  #'$',(A2)+
00001A3A  4284                     839              CLR.L   D4          
00001A3C  3410                     840              MOVE.W  (A0),D2     
00001A3E  4284                     841              CLR.L   D4          
00001A40  183C 0002                842              MOVE.B  #2,D4       
00001A44                           843              
00001A44                           844  putWordBuffer 
00001A44  14FC 0024                845              MOVE.B  #'$',(A2)+  
00001A48  4284                     846              CLR.L   D4          
00001A4A  14FC 0024                847              MOVE.B  #$24,(A2)+  
00001A4E  3410                     848              MOVE.W  (A0),D2       
00001A50  4284                     849              CLR.L   D4          
00001A52  183C 0004                850              MOVE.B  #4,D4       
00001A56                           851             
00001A56  3C07                     852              MOVE.W  D7,D6                
00001A58  5448                     853              ADDQ.W  #2,A0         
00001A5A  4E75                     854              RTS                 
00001A5C                           855  
00001A5C                           856  putLongBuffer
00001A5C  14FC 0024                857              MOVE.B  #'$',(A2)+
00001A60  4284                     858              CLR.L   D4          
00001A62  2410                     859              MOVE.L  (A0),D2     
00001A64  4284                     860              CLR.L   D4          
00001A66  183C 0008                861              MOVE.B  #8,D4      
00001A6A                           862              
00001A6A  3C07                     863              MOVE.W  D7,D6       
00001A6C  5848                     864              ADDQ.W  #4,A0      
00001A6E  4E75                     865              RTS                 
00001A70                           866                     
00004000                           867               ORG   $4000 ; Make sure data starts at $4000
00004000= 48 65 6C 6C 6F 2C ...    868  intro        DC.B    'Hello, please enter beginning and ending addresses',CR,LF
00004034                           869  
00004034= 0034                     870  intro_len   DC.W    intro_len-intro
00004036                           871          
00004036= 45 6E 74 65 72 20 ...    872  string1     DC.B    'Enter start address: $',0
0000404E= 0018                     873  str_len1    DC.W    str_len1-string1  *Get the length of the string
00004050                           874  
00004050= 45 6E 74 65 72 20 ...    875  string2     DC.B    'Enter end address: $',0
00004066= 0016                     876  str_len2    DC.W    str_len2-string2  *Get the length of the string
00004068                           877  
00004068= 50 72 65 73 73 20 ...    878  str_enter   DC.B    'Press enter to read more data',0
00004086= FFE2                     879  str_en_len  DC.W    str_enter-str_en_len
00004088                           880  
00004088= 44 69 73 61 73 73 ...    881  str_more    DC.B    'Disassemble more code? 1 for yes, 0 for no. ',0
000040B6= 002E                     882  strMore_len DC.W    strMore_len-str_more       
000040B8                           883  
000040B8= 43 6C 6F 73 69 6E ...    884  exit        DC.B    'Closing program',0
000040C8= 0010                     885  exit_len    DC.W    exit_len-exit           
000040CA                           886  
000040CA= 01                       887  message_buffer    DC.B   1
000040CB                           888                                   
000040CB                           889  *************************************************************************************************************************
000040CB                           890  * End of program:
000040CB                           891  *************************************************************************************************************************        
000040CC  4E72 2700                892  END         STOP    #$2700
000040D0                           893              END     $1000

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDAL               1638
ADDBTOBUFFER        17C0
ADDWTOBUFFER        17CA
ASCIITOHEX          1100
CAP_TO_HEX          116C
CLEANUP             1110
CLEARALL            107A
CLEARREGISTERS      108C
CMDSH1              1864
CMDSH2              186C
CMDSH3              1880
CMDSH4              1886
CMPAL               1554
CONVERTOHEX         1906
CR                  D
EACODE000           1978
EACODE001           198A
EACODE010           199C
EACODE011           19B6
EACODE100           19D4
EACODE101           19F2
EACODE110           19F6
EACODE111           19FA
EA_MODE_TABLE       1948
END                 40CC
END0000             12B2
END0010             1318
END0011             137E
END0100             1436
END1001             150E
END1011             15CA
END1100             15FA
END1101             16B8
ENDBUFF             11DC
ENDINPUT            10FE
ENDUTIL             109C
EXIT                40B8
EXIT_LEN            40C8
FILLBUFFER          1198
FILL_ADDRESS        118A
FINISH              1180
GETADDR             17EC
GETDIRBIT           17E2
GETEA               191E
GETLONG             1806
GETOPCODE           11FA
GETSIZE             1790
HANDLEINPUTS        109E
HEXTOBUFFER         191A
HIGHREGBITS         17D0
ILLEGALCODE         189A
INTRO               4000
INTRO_LEN           4034
ISMULU              15DC
ISORI               1272
JMP_TABLE           1212
JUMP_TABLE1         16BA
LETTER              1916
LF                  A
LOADDATABUFFER      18C0
LOWER_TO_HEX        1176
MAINEND             17CE
MESSAGE_BUFFER      40CA
MOVEL               12EE
MOVELEA             1302
MOVEPTR             15F2
MOVESIZE            13A2
MOVESIZEL           13CE
MOVESIZEW           13C4
MOVEW               1354
MOVEWEA             1368
MSIZEEND            13D2
NUM_TO_HEX          1162
OPADD               1662
OPADD01             16A4
OPADDA              163C
OPCMPA              1558
OPCMPEOR            157E
OPCODE1_0000        1702
OPCODE1_0001        170A
OPCODE1_0011        1712
OPCODE1_0101        171A
OPCODE1_0111        1722
OPCODE1_1000        172A
OPCODE1_1001        1744
OPCODE1_1010        174C
OPCODE1_1011        1754
OPCODE1_1100        175C
OPCODE1_1101        1764
OPCODE1_1110        1774
OPCODE1_1111        176C
OPCODE_0000         125A
OPCODE_0001         12B4
OPCODE_0011         131A
OPCODE_0100         13D4
OPCODE_0101         1438
OPCODE_0110         1440
OPCODE_0111         144A
OPCODE_1001         1452
OPCODE_1010         1510
OPCODE_1011         1518
OPCODE_1100         15CC
OPCODE_1101         15FC
OPDECODE            11DE
OPLEA               1402
OPMOVEM             173C
OPMULU              15CE
OPRETURN            11F4
OPSUB               14B8
OPSUB01             14FA
OPSUBA              1492
PCTOBUFFER          1A1E
PRINTCOUNT          14
PROGRAM_DONE        1066
PUTBYTEBUFFER       1A36
PUTLONGBUFFER       1A5C
PUTSIZEBUFFER       179A
PUTWORDBUFFER       1A44
RESUME              114A
SHIFT12BITS         C
SHIFT4BITS          4
SHIFT8BITS          8
SHOW                1052
STACK               A000
START               1000
STRING1             4036
STRING2             4050
STRMORE_LEN         40B6
STR_ENTER           4068
STR_EN_LEN          4086
STR_LEN1            404E
STR_LEN2            4066
STR_MORE            4088
SUBAL               148E
SWAPDESTREG         1380
